BROKER SCHEMA putChangedSubscriptionOrderDelivery


CREATE COMPUTE MODULE esqlCheckIfSellByDate
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.Variables.Global.SellByDateError = FALSE;
		
		DECLARE deliveryDate CHARACTER Environment.Variables.Global.OriginRequest.ns:deliveryDate;
		
		FOR orderLine AS Environment.Variables.Global.OriginRequest.ns:orderLines.ns:putChangedSubscriptionOrderDeliveryRequestOrderLinesAdd[] DO
			
			IF checkIfSellByDate(orderLine, deliveryDate) THEN
				
				RETURN FALSE;
				
			END IF;
			
		END FOR;
		
		FOR orderLine AS Environment.Variables.Global.OriginRequest.ns:orderLines.ns:putChangedSubscriptionOrderDeliveryRequestOrderLinesUpd[] DO
			
			IF checkIfSellByDate(orderLine, deliveryDate) THEN
				
				RETURN FALSE;
				
			END IF;
			
		END FOR;

		RETURN TRUE;
	END;
	
CREATE PROCEDURE checkIfSellByDate (IN orderLine REFERENCE, IN deliveryDate CHARACTER)
	RETURNS BOOLEAN
	BEGIN
		
		DECLARE sqlQueryHasSellByDate CHAR ' 
			SELECT COUNT(ZBITNO) AS ITNOCOUNT
			FROM ZITBAL
			WHERE 
					ZBCONO = ''100'' 
				AND ZBITNO = ? 
				AND ZBSLDT > ?
		';
	
		SET Environment.Variables.SQLQueries.HasSellByDate = PASSTHRU(sqlQueryHasSellByDate, orderLine.ns:sku, deliveryDate);
	
		IF Environment.Variables.SQLQueries.HasSellByDate.ITNOCOUNT > 0 THEN
	
			SET OutputLocalEnvironment.Variables.sku = orderLine.ns:sku;
			SET OutputLocalEnvironment.Variables.quantity = orderLine.ns:quantity;
			PROPAGATE TO TERMINAL 'out1';
		
		END IF;
				
		IF Environment.Variables.Global.SellByDateError THEN
			RETURN TRUE;
		END IF;
		
		RETURN FALSE;
	END;
	
END MODULE;
