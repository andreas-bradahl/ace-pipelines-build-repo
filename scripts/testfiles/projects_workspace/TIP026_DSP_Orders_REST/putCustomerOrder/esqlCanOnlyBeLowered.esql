BROKER SCHEMA putCustomerOrder


CREATE COMPUTE MODULE esqlCanOnlyBeLowered
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
				
		DECLARE ITNO CHARACTER;
		DECLARE ORQT CHARACTER;
		DECLARE orderedQuantity INTEGER;
		
		FOR orderLine AS Environment.OrderRequest.Data.orderLines.Item[] DO
			
			IF orderLine.action = 'add' OR orderLine.action = 'upd' THEN
						
				DECLARE sqlQueryCantBeLoweredItemCode CHAR ' 
					SELECT MMITCL
					FROM MITMAS
					WHERE
							MMCONO = ''100''
						AND MMITNO = ?
				';
					
				SET Environment.Variables.SQLQueries.CantBeLoweredItemCode = PASSTHRU(sqlQueryCantBeLoweredItemCode, orderLine.sku);
				
				DECLARE itemCode CHARACTER Environment.Variables.SQLQueries.CantBeLoweredItemCode.MMITCL;
				
				FOR code AS Environment.Variables.SQLQueries.CanOnlyBeLoweredItemCodes.code[] DO
				
					IF itemCode = code THEN
						
						IF orderLine.action = 'upd' THEN
					
							FOR lstLine2Record AS Environment.JSONResponse.LstLine2.Data.MIRecord.Item[] DO
								
								SET ITNO = TRIM(GetValueFromNameValueList('ITNO', lstLine2Record.NameValue));
								
								IF ITNO = orderLine.sku THEN
									
									SET ORQT = TRIM(GetValueFromNameValueList('ORQT', lstLine2Record.NameValue));
									
									IF CONTAINS(ORQT, '.') THEN
										SET orderedQuantity = CAST(SUBSTRING(ORQT BEFORE '.') AS INTEGER);
									ELSE
										SET orderedQuantity = CAST(ORQT AS INTEGER);					
									END IF;
									
									IF orderedQuantity < orderLine.quantity THEN
										
										DECLARE envRef REFERENCE TO Environment;
										CALL setErrorMessage(400, 'FAILED', 'ORDER_ONLY_LOWER', envRef);
										PROPAGATE TO TERMINAL 'out1';
										RETURN FALSE;
										
									END IF;
									
								END IF;
								
							END FOR;
						
						ELSE
						
							DECLARE envRef REFERENCE TO Environment;
							CALL setErrorMessage(400, 'FAILED', 'ORDER_ONLY_LOWER', envRef);
							PROPAGATE TO TERMINAL 'out1';
							RETURN FALSE;
							
						END IF;
						
					END IF;
				
				END FOR;
				
			END IF;
			
		END FOR;
		
		RETURN TRUE;
	END;
END MODULE;
