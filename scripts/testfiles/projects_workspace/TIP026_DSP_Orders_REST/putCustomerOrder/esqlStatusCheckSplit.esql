BROKER SCHEMA putCustomerOrder


CREATE COMPUTE MODULE esqlStatusCheckSplit
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE error BOOLEAN FALSE;
		DECLARE PromoFlag BOOLEAN Environment.Variables.Global.Flags.PromoSplit;
		DECLARE OPEXFlag BOOLEAN Environment.Variables.Global.Flags.OPEXSplit;
		DECLARE OriginPromoFlag BOOLEAN Environment.Variables.Global.Flags.OriginPromo;
		
		DECLARE customerWarehouseOrderRef REFERENCE TO Environment.Variables.Global.OrderSplit.customerWarehouseOrder.orderLines;
		DECLARE promotionalOrder REFERENCE TO Environment.Variables.Global.PromoSplit.promotionalOrder.orderLines;
		DECLARE normalOrder REFERENCE TO Environment.Variables.Global.PromoSplit.normalOrder.orderLines;
		
		IF OPEXFlag AND NOT(OriginPromoFlag) THEN
			SET error = statusCheck(customerWarehouseOrderRef);
		END IF;
			
		IF OriginPromoFlag AND NOT(OPEXFlag) THEN
			SET error = statusCheck(promotionalOrder);
		END IF;
	
		IF NOT(OriginPromoFlag) AND NOT(OPEXFlag) THEN
			SET error = statusCheck(normalOrder);
		END IF;
		
		IF error THEN
			
			DECLARE envRef REFERENCE TO Environment;
			CALL setErrorMessage(400, 'FAILED', 'ORDER_LINE_STATUS', envRef);
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
			
		END IF;
		
		RETURN TRUE;
	END;
	
CREATE PROCEDURE statusCheck (IN orderLinesRef REFERENCE)
RETURNS BOOLEAN
	BEGIN
		
		DECLARE ITNO CHARACTER;
		DECLARE status INTEGER;

		FOR orderLine AS orderLinesRef.Item[] DO
			
			IF orderLine.action = 'upd' OR orderLine.action = 'del' THEN
							
				FOR lstLine2Record AS Environment.JSONResponse.LstLine2.Data.MIRecord.Item[] DO
					
					SET ITNO = TRIM(GetValueFromNameValueList('ITNO', lstLine2Record.NameValue));
					
					IF orderLine.sku = ITNO THEN
						
						SET status = CAST(TRIM(GetValueFromNameValueList('ORST', lstLine2Record.NameValue)) AS INTEGER);
						
						IF status <= 33 AND status >= 22 THEN
						ELSE
							RETURN TRUE;							
						END IF;
						
					END IF;
					
				END FOR;
				
			END IF;
		
		END FOR;
		
		RETURN FALSE;
		
	END;
	
END MODULE;
