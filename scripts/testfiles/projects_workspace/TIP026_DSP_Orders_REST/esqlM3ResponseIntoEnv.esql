

CREATE COMPUTE MODULE esqlM3ResponseIntoEnv
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		IF EXISTS(InputRoot.JSON.Data.MIRecord[]) THEN
		
			DECLARE program CHARACTER InputRoot.JSON.Data.Program;
			DECLARE transaction CHARACTER InputRoot.JSON.Data.Transaction;
			DECLARE m3Endpoint CHARACTER program || '_' || transaction;
			
			CREATE FIELD Environment.Variables.HTTPResponses.{m3Endpoint};
			DECLARE envRef REFERENCE TO Environment.Variables.HTTPResponses.{m3Endpoint};
			DECLARE itemRef REFERENCE TO Environment;
			
			DECLARE name CHARACTER;
			DECLARE value CHARACTER;
			
			DECLARE entityCursor REFERENCE TO InputRoot.JSON.Data.MIRecord.Item;
			WHILE LASTMOVE(entityCursor) DO
				
				CREATE LASTCHILD OF envRef AS itemRef NAME 'Item';
				
				DECLARE valueCursor REFERENCE TO entityCursor.NameValue.Item;
				WHILE LASTMOVE(valueCursor) DO
					
					SET name = valueCursor.Name;
					SET value = valueCursor.Value;
				
					SET itemRef.{name} = TRIM(value);
					
					MOVE valueCursor NEXTSIBLING REPEAT NAME;
				END WHILE;
				
				
				MOVE entityCursor NEXTSIBLING REPEAT NAME;
			END WHILE;
			
		ELSEIF EXISTS(InputRoot.JSON.Data.Metadata[]) THEN
			
			DECLARE program CHARACTER InputRoot.JSON.Data.Program;
			DECLARE transaction CHARACTER InputRoot.JSON.Data.Transaction;
			DECLARE m3Endpoint CHARACTER program || '_' || transaction;
			
			CREATE FIELD Environment.Variables.HTTPResponses.{m3Endpoint};		
			
		ELSE
			
			SET OutputRoot = InputRoot;
			
			IF OutputRoot.JSON.Data.Message <> '' THEN
				SET OutputRoot.JSON.Data.Message = TRIM(OutputRoot.JSON.Data.Message);
			END IF;
				
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;					
			
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;
