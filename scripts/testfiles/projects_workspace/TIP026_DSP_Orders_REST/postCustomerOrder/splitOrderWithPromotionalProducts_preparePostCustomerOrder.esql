BROKER SCHEMA postCustomerOrder


CREATE COMPUTE MODULE "splitOrderWithPromotionalProducts_preparePostCustomerOrder"
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- This is needed due to a header that has been set in a shape far-far-away...
		CALL CopyMessageHeaders();
		-- not sure if this one is neede thou, added just in case...
		CALL CopyEntireMessage();
 
		SET OutputLocalEnvironment.Destination.HTTP.QueryString.optimizeOrderLines = Environment.Variables.optimizeOrderLines;
		
		DECLARE orderRequestRef REFERENCE TO Environment.PromoOrder;
		
		CREATE FIELD OutputRoot.JSON.Data; 
		
		DECLARE outDataItemCursor REFERENCE TO OutputRoot.JSON.Data;

 		SET outDataItemCursor.prevOrderType = Environment.NormalOrder.orderType;
 		SET outDataItemCursor.companyNumber = orderRequestRef.companyNumber;
 		SET outDataItemCursor.customerNumber = orderRequestRef.customerNumber;
		SET outDataItemCursor.orderType = orderRequestRef.orderType; 
		SET outDataItemCursor.requestedDeliveryDate = orderRequestRef.requestedDeliveryDate;
		SET outDataItemCursor.estimatedOrderAmount = orderRequestRef.estimatedOrderAmount;
 		
 		CREATE FIELD outDataItemCursor.orderLines IDENTITY(JSON.Array);
 		DECLARE outDataOrderLines, outDataOrderlinesItemCursor REFERENCE TO outDataItemCursor.orderLines;
 		
 		
 		-- loop over alle PromoOrder orderlines items 
 		DECLARE promoOrderOrderLinesCursor REFERENCE TO Environment.PromoOrder.orderLines.Item;
 		WHILE LASTMOVE(promoOrderOrderLinesCursor) DO
 			CREATE LASTCHILD of outDataOrderLines AS outDataOrderlinesItemCursor NAME 'Item';
 			SET outDataOrderlinesItemCursor.sku = promoOrderOrderLinesCursor.sku;
 			SET outDataOrderlinesItemCursor.quantity = promoOrderOrderLinesCursor.quantity; 
 			SET outDataOrderlinesItemCursor.orderLineUnit = promoOrderOrderLinesCursor.orderLineUnit;
 			MOVE promoOrderOrderLinesCursor NEXTSIBLING;
 		END WHILE;
		
		RETURN TRUE;
 		END;
 		
 		CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
 		
 			
END MODULE;
